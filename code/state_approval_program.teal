#pragma version 7

////////////////
// Handle each possible OnCompletion type. We don't have to worry about
// handling ClearState, because the ClearStateProgram will execute in that
// case, not the ApprovalProgram.
// see ../manage/goal_code for examples

txn OnCompletion
int NoOp
==
bnz handle_noop

txn OnCompletion
int OptIn
==
bnz handle_optin

txn OnCompletion
int CloseOut
==
bnz handle_closeout

txn OnCompletion
int UpdateApplication
==
bnz handle_updateapp

txn OnCompletion
int DeleteApplication
==
bnz handle_deleteapp

// Unexpected OnCompletion value. Should be unreachable.
b decline
////////////////


////////////////
// main part of code: NoOp
// 2 cases each with 2 subcases: lock (algo or asa), unlock (algo or asa)

handle_noop:

txna ApplicationArgs 0
byte "OPT_IN_ASA"
==
bnz handle_opt_in_asa

txna ApplicationArgs 0
byte "UNLOCK"
==
bnz handle_unlock

// Unexpected first arg
b decline
////////////////


////////////////
handle_opt_in_asa:

global GroupSize
int 2
==
gtxn 0 TypeEnum
int pay
==
gtxn 0 Receiver
global CurrentApplicationAddress
==
gtxn 0 Amount
int 101000
==
txn GroupIndex
int 1
==
&&
&&
&&
&&
assert

// opt in smart contract
int 0
global CurrentApplicationAddress
txna Assets 0
callsub send_asa

b approve
////////////////



////////////////
// case unlock
handle_unlock:

// only owner can unlock
txn Sender
global CreatorAddress
==
assert

// energies
txna ApplicationArgs 1 // energyA
btoi
txna ApplicationArgs 2 // energyB
btoi

// stack: energyA, energyB
txna Accounts 2 // B
callsub send

// stack: energyA
txna Accounts 1 // A
callsub send

b approve
////////////////



///////////////
// Update only by creator - for now
// TODO make updating impossible for safety and assurance later
handle_updateapp:

global GroupSize
int 1
==
global CreatorAddress
txn Sender
==
&&
bnz approve
b decline
///////////////


///////////////
// handle closeOut, cannot delete app, no decline
handle_closeout:
handle_deleteapp:
b decline
///////////////

///////////////
// handle opt-in
handle_optin:
b approve
///////////////

////////////////
// subroutines

// pops: ... stack, amount, receiver
// pushes: none
send:
txn NumAssets
bz send_algo
txna Assets 0
b send_asa_non_zero

// if amount != 0, send algo
// pops: ... stack, amount, receiver
// pushes: none
send_algo:
dig 1 // stack: amount, receiver, amount
bz send_algo_end_early // stack: amount, receiver
// if amount < 100000 && balance == 0, do not send (would result in error)
dig 1 // stack: amount, receiver, amount
int 100000 // stack: amount, receiver, amount, 10000
< // stack: amount, receiver, 0/1
bz send_algo_txn // stack: amount, receiver
dup // stack: amount, receiver, receiver
balance // stack: amount, receiver, balance
int 0 // stack: amount, receiver, balance, 0
== // stack: amount, receiver, 0/1
bz send_algo_txn
b send_algo_end_early // balance is zero, skip
send_algo_txn:
itxn_begin
int pay
itxn_field TypeEnum
itxn_field Receiver
itxn_field Amount
itxn_submit
retsub
send_algo_end_early:
pop
pop
retsub

// pops: ... stack, amount, receiver, assetid
// pushes: none
send_asa_non_zero:
dig 2
bz send_asa_non_zero_end_early
callsub send_asa_if_opted_in
retsub
send_asa_non_zero_end_early:
pop
pop
pop
retsub

// pops: ... stack, amount, receiver, assetid
// pushes: none
send_asa_if_opted_in:

// check that receiver is opted-in
dig 1
dig 1
asset_holding_get AssetBalance
bz send_asa_if_opted_in_end_early
pop

callsub send_asa
retsub

send_asa_if_opted_in_end_early:
pop
pop
pop
pop
retsub

// pops: ... stack, amount, receiver, assetid
// pushes: none
send_asa:
itxn_begin
int axfer
itxn_field TypeEnum
itxn_field XferAsset
itxn_field AssetReceiver
itxn_field AssetAmount
itxn_submit
retsub

////////////////
// end branches
decline:
int 0
return

approve:
int 1
return
////////////////


////////////////
// fyi
// Txn.Accounts[0] is sender of txn
// Txn.Apps[0] is own app
////////////////