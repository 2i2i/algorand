#pragma version 5

////////////////
// TODO: can we opt-in CREATOR somehow as well?

////////////////
// Handle each possible OnCompletion type. We don't have to worry about
// handling ClearState, because the ClearStateProgram will execute in that
// case, not the ApprovalProgram.
// see ../manage/goal_code for examples

txn OnCompletion
int NoOp
==
bnz handle_noop

txn OnCompletion
int OptIn
==
bnz handle_optin

txn OnCompletion
int CloseOut
==
bnz handle_closeout

txn OnCompletion
int UpdateApplication
==
bnz handle_updateapp

txn OnCompletion
int DeleteApplication
==
bnz handle_deleteapp

// Unexpected OnCompletion value. Should be unreachable.
b decline
////////////////


////////////////
// main part of code: NoOp
// 2 cases each with 2 subcases: lock (algo or asa), unlock (algo or asa)

handle_noop:

txna ApplicationArgs 0
byte "LOCK"
==
bnz handle_lock

txna ApplicationArgs 0
byte "UNLOCK"
==
bnz handle_unlock

// Unexpected first arg
b decline
////////////////


////////////////
// case lock
// locks consist of 2 or 3 (if optin to SYSTEM needed) main txns
// 1. call STATE dapp (to set state)
// 2. send coins to ESCROW (to lock)
// in case the coins sent are an ASA, we have a 3rd txn (but ordered 2nd):
// 3. send ALGO to ESCROW to cover unlock fees paid by ESCROW/OWNER
handle_lock:

// Check that this is the 2nd txn
txn GroupIndex
int 1
==
assert

// Check that the 1st txn is to our app
int 0
gtxns Receiver
global CurrentApplicationAddress
==
assert

// Check that 1st txn is ALGO
int 0
gtxns XferAsset
int 0
==
assert

// Check that 1st txn is payment
int 0
gtxns TypeEnum
int pay
==
assert

// locking ALGO?
global GroupSize
int 2
==
assert

b handle_lock_algo

// need to either be locking ALGO or ASA
// b decline
////////////////


////////////////
// case lock ALGO
handle_lock_algo:

// TODO send tokens back to A

b approve
////////////////



////////////////
// case unlock
// call STATE dapp (to check and unset state)
// unlocks consist of 3 inner txns
// 1. send coins from ESCROW back to A (unused energy)
// 2. send coins from ESCROW to FEE (service fee)
// 3. send coins from ESCROW to B (energy transfer)
handle_unlock:

// only owner can unlock
txn Sender
global CreatorAddress
==
assert

b handle_unlock_algo


////////////////
// case unlock ALGO
handle_unlock_algo:

// energies
txna ApplicationArgs 1 // energyA
btoi
txna ApplicationArgs 2 // energyFee
btoi
txna ApplicationArgs 3 // energyB
btoi

// stack: energyA, energyFee, energyB
txna Accounts 2 // B
callsub send_algo

// stack: energyA, energyFee
global MinTxnFee
+
global CreatorAddress // Fee
callsub send_algo

// stack: energyA
txna Accounts 1 // A
callsub send_algo

b approve
////////////////



///////////////
// Update only by creator - for now
// TODO maybe make updating impossible for safety and assurance
handle_updateapp:

global GroupSize
int 1
==
global CreatorAddress
txn Sender
==
&&
bnz approve
b decline
///////////////


///////////////
// handle closeOut, cannot delete app, no decline
handle_closeout:
handle_deleteapp:
b decline
///////////////

///////////////
// handle opt-in
handle_optin:
b approve
///////////////

////////////////
// subroutines

// if amount != 0, send algo
// pops: ... stack, amount, receiver
// pushes: none
send_algo:
dig 1 // stack: amount, receiver, amount
bz send_algo_end_early // stack: amount, receiver
// if amount < 100000 && balance == 0, do not send (would result in error)
dig 1 // stack: amount, receiver, amount
int 100000 // stack: amount, receiver, amount, 10000
< // stack: amount, receiver, 0/1
bz send_algo_txn // stack: amount, receiver
dup // stack: amount, receiver, receiver
balance // stack: amount, receiver, balance
int 0 // stack: amount, receiver, balance, 0
== // stack: amount, receiver, 0/1
bz send_algo_txn
b send_algo_end_early // balance is zero, skip
send_algo_txn:
itxn_begin
int pay
itxn_field TypeEnum
itxn_field Receiver
itxn_field Amount
itxn_submit
retsub
send_algo_end_early:
pop
pop
retsub

////////////////
// end branches
decline:
int 0
return

approve:
int 1
return
////////////////


////////////////
// fyi
// Txn.Accounts[0] is sender of txn
// Txn.Apps[0] is own app
////////////////